package com.test.notificationserver;

import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;

import java.time.Duration;

@SpringBootApplication
@RestController
@EnableBinding(Sink.class)
public class NotificationserviceApplication {
	private Logger logger = LoggerFactory.getLogger(NotificationserviceApplication.class);

    @Autowired
    private WebClient.Builder webClientBuilder;

    @Autowired
    private CircuitBreakerFactory circuitBreakerFactory;

    @StreamListener(Sink.INPUT)
    public void consumeMessage(Message message) {
        // Configure CircuitBreaker
        CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()
                .failureRateThreshold(50)
                .waitDurationInOpenState(Duration.ofSeconds(30))
                .permittedNumberOfCallsInHalfOpenState(2)
                .slidingWindowType(CircuitBreakerConfig.SlidingWindowType.COUNT_BASED)
                .slidingWindowSize(5)
                .build();

        // Get or create CircuitBreaker from CircuitBreakerFactory
        CircuitBreakerRegistry circuitBreakerRegistry = circuitBreakerFactory.getProvider().getRegistry();
        io.github.resilience4j.circuitbreaker.CircuitBreaker circuitBreaker = circuitBreakerRegistry.circuitBreaker("getEmployee", circuitBreakerConfig);

        // Use CircuitBreaker to handle WebClient calls
        EmployeeResponseModel employeeModel = circuitBreaker.executeSupplier(() -> {
            EmployeeResponseModel model = webClientBuilder.build().get()
                    .uri("http://localhost:9002/api/v1/employees/" + message.getEmployeeId())
                    .retrieve()
                    .bodyToMono(EmployeeResponseModel.class)
                    .block();
            return model;
        }, throwable -> {
            logger.error("Error retrieving employee information: " + throwable.getMessage());
            EmployeeResponseModel model = new EmployeeResponseModel();
            model.setFirstName("Anonymous");
            model.setLastName("Employee");
            return model;
        });

        if (employeeModel != null) {
            logger.info("Consume Payload: " + employeeModel.getFirstName() + " " + employeeModel.getLastName() + " " + message.getMessage());
        }
    }

    public static void main(String[] args) {
        SpringApplication.run(NotificationserviceApplication.class, args);
    }

    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder();
    }
//	@StreamListener(Sink.INPUT)
//	public void consumeMessage(String message) {
//		System.out.println("Consume Payload: " + message);
//	}
//	

	
}
